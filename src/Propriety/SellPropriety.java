/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Propriety;

import Model.AppManager;
import Model.Player;
import Model.Propriety;
import View.FourPlayer.PlayersWindowFour;
import View.ShowPropriety;
import View.ThreePlayer.PlayersWindowThree;
import View.TwoPlayer.PlayersWindow;
import java.util.LinkedList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Carlos Gomez
 */
public class SellPropriety extends javax.swing.JDialog {
    private Propriety propriety;
    private java.awt.Frame parent;
    private PlayersWindow window;
    private PlayersWindowThree windowThree;
    private PlayersWindowFour windowFour;
    private ShowPropriety show;
    /**
     * Creates new form SellPropriety
     */
    public SellPropriety(java.awt.Frame parent, boolean modal,String name,PlayersWindow window,ShowPropriety show) {
        super(parent, modal);
        initComponents();
        this.parent = parent;
        this.window = window;
        this.show = show;
        for(Propriety p:AppManager.INSTANCE.getProprieties()){
            if(p.getName().equals(name)){
               propriety=p;
               break;
            }
        }
        
        init();
    }
    
    public SellPropriety(java.awt.Frame parent, boolean modal,String name,PlayersWindowThree windowThree,ShowPropriety show) {
        super(parent, modal);
        initComponents();
        this.parent = parent;
        this.windowThree=windowThree;
        this.show = show;
        for(Propriety p:AppManager.INSTANCE.getProprieties()){
            if(p.getName().equals(name)){
               propriety=p;
               break;
            }
        }
        
        init();
    }
    
    public SellPropriety(java.awt.Frame parent, boolean modal,String name,PlayersWindowFour windowFour,ShowPropriety show) {
        super(parent, modal);
        initComponents();
        this.parent = parent;
        this.windowFour = windowFour;
        this.show = show;
        for(Propriety p:AppManager.INSTANCE.getProprieties()){
            if(p.getName().equals(name)){
               propriety=p;
               break;
            }
        }
        
        init();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtOwner = new javax.swing.JTextField();
        txtPrice = new javax.swing.JTextField();
        cbPlayer = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Owner:");

        jLabel2.setText("Buyer:");

        jLabel3.setText("Price:");

        txtOwner.setEditable(false);

        jButton1.setText("Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Cancel");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Sell");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtOwner, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cbPlayer, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(18, 18, 18)
                                .addComponent(txtPrice)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 164, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbPlayer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 126, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if(propriety.getName().contains("Aeroporto")){
            AeroportCard card = new AeroportCard(parent,true,propriety);
            card.setVisible(true);
        }else if(propriety.getName().contains("Internet")){
            InternetService card = new InternetService(parent,true,propriety);
            card.setVisible(true);
        }else if(propriety.getName().contains("TelemÃ³veis")){
            PhoneService card = new PhoneService(parent,true,propriety);
            card.setVisible(true);
        }else{
            ProprietyCard card = new ProprietyCard(parent,true,propriety);
            card.setVisible(true);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        closeWindow();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String color = propriety.getColor();
        String insertMoney = txtPrice.getText();
        float money;
        Player player = (Player) cbPlayer.getSelectedItem();
        Player owner = propriety.getOwner();
        int count = 0,countHouses=0;
      
      for(Propriety p:owner.getProprieties()){
          if(p.getColor().equals(color)){
              count++;
              if(p.getNumberOfHouse() > 0){
                  countHouses++;
              }
          }
      }
      
      switch(color){
        case "Branco":
            if(insertMoney.contains("M")){
                money = Float.parseFloat(insertMoney.split("M")[0])* 1000000;
             }else{
                money = Float.parseFloat(insertMoney.split("K")[0])*1000;
             }

             if(player.getMoney()< money){
                 showError(1);
             }else{
                 propriety.setOwner(player);
                 owner.setMoney(owner.getMoney() + money);
                 owner.removePropriety(propriety);
                 player.addPropriety(propriety);
                 player.setMoney(player.getMoney() - money);
                 closeWindow();
             }
        break;
        case "Azul Escuro":
            if(count == 2){
                if(countHouses > 0){
                    showError(2);
                }else{
                    if(insertMoney.contains("M")){
                        money = Float.parseFloat(insertMoney.split("M")[0])* 1000000;
                     }else{
                        money = Float.parseFloat(insertMoney.split("K")[0])*1000;
                     }

                     if(player.getMoney()< money){
                         showError(1);
                     }else{
                         propriety.setOwner(player);
                         owner.setMoney(owner.getMoney() + money);
                         player.setMoney(player.getMoney() - money);
                         owner.removePropriety(propriety);
                         player.addPropriety(propriety);
                         closeWindow();
                     }
                }
            }
        break;
        case "Castanho":
            if(count == 2){
                if(countHouses > 0){
                    showError(2);
                }else{
                    if(insertMoney.contains("M")){
                        money = Float.parseFloat(insertMoney.split("M")[0])* 1000000;
                     }else{
                        money = Float.parseFloat(insertMoney.split("K")[0])*1000;
                     }

                     if(player.getMoney()< money){
                         showError(1);
                     }else{
                         propriety.setOwner(player);
                         owner.setMoney(owner.getMoney() + money);
                         player.setMoney(player.getMoney() - money);
                         owner.removePropriety(propriety);
                         player.addPropriety(propriety);
                         closeWindow();
                     }
                }
            }
        break;
        default:
            if(count == 3){
                if(countHouses > 0){
                    showError(2);
                }else{
                    if(insertMoney.contains("M")){
                        money = Float.parseFloat(insertMoney.split("M")[0])* 1000000;
                     }else{
                        money = Float.parseFloat(insertMoney.split("K")[0])*1000;
                     }

                     if(player.getMoney()< money){
                         showError(1);
                     }else{
                         propriety.setOwner(player);
                         owner.setMoney(owner.getMoney() + money);
                         player.setMoney(player.getMoney() - money);
                         owner.removePropriety(propriety);
                         player.addPropriety(propriety);
                         closeWindow();
                     }
                }
            }
        break;
      }
      
      updateWindow();
      show.UpdateProprieties();
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
  

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbPlayer;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JTextField txtOwner;
    private javax.swing.JTextField txtPrice;
    // End of variables declaration//GEN-END:variables

    private void init() {
        txtOwner.setText(propriety.getOwner().getName());
        LinkedList<Player> listAux = new LinkedList<>();
        
        Player player = propriety.getOwner();
        
        for(Player p:AppManager.INSTANCE.getPlayers()){
            if(p.getNumber()!= player.getNumber()){
                listAux.add(p);
            }
        }
        
        cbPlayer.setModel(new DefaultComboBoxModel(listAux.toArray()));
    }

    private void closeWindow() {
        this.dispose();
    }

    private void showError(int erro) {
        String message;
        switch(erro){
            case 1:
                //Number format 
                message ="Player dont have enough money to buy it";
                JOptionPane.showMessageDialog(this, message);
            break;
            case 2:
                //Number format 
                message ="Cant sell propriety because it have house";
                JOptionPane.showMessageDialog(this, message);
            break;
        }
    }
    
    private void updateWindow(){
       if(window == null){
            if(windowThree != null){
                 //janela tres
                windowThree.setCurrentMoneyPLayer1();
                windowThree.setCurrentMoneyPLayer2();
                windowThree.setCurrentMoneyPLayer3();


            } else{
                //janela four
                windowFour.setCurrentMoneyPLayer1();
                windowFour.setCurrentMoneyPLayer2();
                windowFour.setCurrentMoneyPLayer3();
                windowFour.setCurrentMoneyPLayer4();
                
            }
         }else{
            //janela dois
            window.setCurrentMoneyPLayer1();
            window.setCurrentMoneyPLayer2();
        }
   }
}
